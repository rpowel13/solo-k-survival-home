
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://daorpdnaganfugudqkmk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRhb3JwZG5hZ2FuZnVndWRxa21rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MzcxODgsImV4cCI6MjA2MDQxMzE4OH0.op3xLPd8TLjqozzI21xZxNFrDqXO9uVyKZzY6-8cpSc";

console.log(`[${new Date().toISOString()}] Initializing Supabase client with URL:`, SUPABASE_URL);

// Anonymous client - USE THIS FOR PUBLIC ACCESS
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // We don't need persistent sessions for anonymous users
    autoRefreshToken: false, // Disable token auto-refresh for anonymous users
  },
  global: {
    // Adding fetch options to debug
    fetch: (url, options) => {
      // Log fetch requests for debugging
      console.log(`[${new Date().toISOString()}] Supabase fetch request:`, { 
        url: url.toString(), 
        method: options?.method,
      });
      return fetch(url, options);
    },
  },
});

// Add initialization success check
supabase.from('contacts')
  .select('id')
  .limit(1)
  .then(({ data, error }) => {
    if (error) {
      console.error(`[${new Date().toISOString()}] Supabase initialization test failed:`, error);
    } else {
      console.log(`[${new Date().toISOString()}] Supabase initialization successful - contacts table accessible`);
    }
  });
